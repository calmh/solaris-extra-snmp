#!/usr/bin/python

BASE_OID = '.1.3.6.1.4.1.25359.1'

import sys, commands, re, snmpresponse

def kstat(name):
    output = commands.getoutput("kstat -p " + name)
    try:
        return int(re.split("\s+", output)[1])
    except:
        return 0

def zfs_arc_size(oid):
    return ('gauge', kstat("zfs:0:arcstats:size") / 1024) # KB

def zfs_arc_data(oid):
    return ('gauge', kstat("zfs:0:arcstats:data_size") / 1024) # KB

def zfs_arc_meta(oid):
    return ('gauge', kstat("zfs:0:arcstats:meta_used") / 1024) # KB

def zfs_arc_hits(oid):
    return ('counter', kstat("zfs:0:arcstats:hits") % 2**32) # 32 bit counter

def zfs_arc_misses(oid):
    return ('counter', kstat("zfs:0:arcstats:misses") % 2**32) # 32 bit counter

def zfs_read(oid):
    return ('counter', kstat("unix:0:vopstats_zfs:read_bytes") / 1024 % 2**32) # 32 bit KB counter

def zfs_readdir(oid):
    return ('counter', kstat("unix:0:vopstats_zfs:readdir_bytes") / 1024 % 2**32) # 32 bit KB counter

def zfs_write(oid):
    return ('counter', kstat("unix:0:vopstats_zfs:write_bytes") / 1024 % 2**32) # 32 bit KB counter

def zfs_l2arc_hits(oid):
    return ('counter', kstat("zfs:0:arcstats:l2_hits") % 2**32) # 32 bit counter

def zfs_l2arc_misses(oid):
    return ('counter', kstat("zfs:0:arcstats:l2_misses") % 2**32) # 32 bit counter

def zfs_l2arc_write(oid):
    return ('counter', kstat("zfs:0:arcstats:l2_write_bytes") / 1024 % 2**32) # 32 bit KB counter

def zfs_l2arc_read(oid):
    return ('counter', kstat("zfs:0:arcstats:l2_read_bytes") / 1024 % 2**32) # 32 bit KB counter

def zfs_pools():
    statuses = { "ONLINE": 1, "DEGRADED": 2, "FAULTED": 3 }
    pools = [ re.split('\s+', line) for line in commands.getoutput("zpool list -H -o name,health").split("\n") ]
    pools = [ ( row[0], statuses.get(row[1], 4) ) for row in pools ]
    return pools

def zfs_used_avail(fs):
    return [ int(x) / 1024 for x in commands.getoutput("zfs get -Hpo value used,available " + fs).split("\n")]

def zfs_used(fs, divisor=1):
    return ('gauge', zfs_used_avail(fs)[0] / divisor)

def zfs_avail(fs, divisor=1):
    return ('gauge', zfs_used_avail(fs)[1] / divisor)

# nymnetworks     OBJECT IDENTIFIER ::= {enterprises 25359}
# zfs             OBJECT IDENTIFIER ::= {nymnetworks 1}
# fs              OBJECT IDENTIFIER ::= {zfs 1}
# arc             OBJECT IDENTIFIER ::= {zfs 2}
# l2arc           OBJECT IDENTIFIER ::= {zfs 3}
# io              OBJECT IDENTIFIER ::= {zfs 4}

result = [
    ( BASE_OID + '.2.1.0', zfs_arc_size),
    ( BASE_OID + '.2.2.0', zfs_arc_meta),
    ( BASE_OID + '.2.3.0', zfs_arc_data),
    ( BASE_OID + '.2.4.0', zfs_arc_hits),
    ( BASE_OID + '.2.5.0', zfs_arc_misses),

    ( BASE_OID + '.3.1.0', zfs_l2arc_hits),
    ( BASE_OID + '.3.2.0', zfs_l2arc_misses),
    ( BASE_OID + '.3.3.0', zfs_l2arc_read),
    ( BASE_OID + '.3.4.0', zfs_l2arc_write),

    ( BASE_OID + '.4.1.0', zfs_read),
    ( BASE_OID + '.4.2.0', zfs_readdir),
    ( BASE_OID + '.4.3.0', zfs_write),
]

i = 1
for pool, health in zfs_pools():
    result.append((BASE_OID + '.1.1.' + str(i), ('string', pool)))
    result.append((BASE_OID + '.1.2.' + str(i), lambda oid, fs=pool: zfs_avail(fs)))
    result.append((BASE_OID + '.1.3.' + str(i), lambda oid, fs=pool: zfs_used(fs)))
    result.append((BASE_OID + '.1.4.' + str(i), ('integer', health)))
    result.append((BASE_OID + '.1.12.' + str(i), lambda oid, fs=pool: zfs_avail(fs, 1024)))
    result.append((BASE_OID + '.1.13.' + str(i), lambda oid, fs=pool: zfs_used(fs, 1024)))
    i += 1

operation = sys.argv[1]
req_oid = sys.argv[2]

snmpresponse.respond_to(operation, req_oid, result)

